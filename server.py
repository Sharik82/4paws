import os
from flask import Flask, request, jsonify, render_template, session
from flask_sqlalchemy import SQLAlchemy
from flask_session import Session
from dotenv import load_dotenv  # –î–æ–¥–∞—î–º–æ dotenv –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ .env

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

app = Flask(__name__, template_folder="templates")

# üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SECRET_KEY
app.secret_key = os.getenv("SECRET_KEY")

# üîπ –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É
DATABASE_PATH = os.path.join(BASE_DIR, "instance", "users.db")  # –§–æ—Ä–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö

app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{DATABASE_PATH}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
Session(app)

db = SQLAlchemy(app)


# üìå **–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(256), nullable=False)

# üìå **–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä—É**
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=True)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(255), nullable=True)  # URL –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "price": self.price,
            "image_url": self.image_url
        }

# üìå **–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞**
@app.route('/')
def index():
    products = Product.query.all()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –ë–î
    return render_template('index.html', products=products)

# üìå **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤**
@app.route('/categories/dogs')
def dog_category():
    return render_template('categories/dog.html')

@app.route('/categories/cats')
def cat_category():
    return render_template('categories/cat.html')

@app.route('/categories/rodents')
def rodents_category():
    return render_template('categories/rodents.html')

@app.route('/categories/fish')
def fish_category():
    return render_template('categories/fish.html')

@app.route('/categories/dove')
def dove_category():
    return render_template('categories/dove.html')

@app.route('/categories/snake')
def snake_category():
    return render_template('categories/snake.html')

# üìå **–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É JSON**
@app.route('/api/products', methods=['GET'])
def get_products():
    products = Product.query.all()
    return jsonify([product.to_dict() for product in products])

# üìå **–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–æ–≤–∞—Ä—É**
@app.route("/product/<int:product_id>")
def product_page(product_id):
    product = Product.query.get(product_id)
    if not product:
        return "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 404
    return render_template("product.html", product=product)

# üìå **–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (API)**
@app.route("/search")
def search():
    query = request.args.get("query", "").strip()
    if not query:
        return jsonify([])  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π

    products = Product.query.filter(Product.name.ilike(f"%{query}%")).all()
    return jsonify([product.to_dict() for product in products])

# üìå **–°—Ç–æ—Ä—ñ–Ω–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è**
@app.route('/checkout')
def checkout():
    cart = session.get('cart', [])

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ ID –Ω–∞ –æ–±'—î–∫—Ç–∏ –∑ –±–∞–∑–∏
    detailed_cart = [Product.query.get(item).to_dict() for item in cart if Product.query.get(item)]
    
    return render_template('checkout.html', cart=detailed_cart)

# üìå **API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—à–∏–∫–æ–º**
@app.route("/api/cart", methods=["GET", "POST"])
def cart():
    if "cart" not in session:
        session["cart"] = []  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—à–∏–∫, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î

    if request.method == "POST":
        data = request.json
        product = Product.query.get(data.get("id"))  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä —î –≤ –ë–î
        if product:
            session["cart"].append(product.id)  # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ –∑–∞ ID
            session.modified = True
            return jsonify({"message": "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫", "cart": session["cart"]})
        return jsonify({"error": "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 404

    return jsonify(session["cart"])  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞

# üìå **API –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞**
@app.route("/api/cart/clear", methods=["POST"])
def clear_cart():
    session["cart"] = []
    session.modified = True
    return jsonify({"message": "–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ"})

# üìå **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", port=5050, debug=True)
